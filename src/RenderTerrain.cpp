#include "RenderTerrain.h"

#define BUFFER_OFFSET(i) ((char *)NULL + (i))

double simplex_noise3d(osn_context* ctx1, glm::vec3 pos){
	return open_simplex_noise3(ctx1, pos.x, pos.y, pos.z) * 10;
}


const signed char num_vec[256] = { 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 2, 3, 4, 4, 3, 3, 4, 4, 3, 4, 5, 5, 2,
1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4,
2, 3, 3, 4, 3, 4, 2, 3, 3, 4, 4, 5, 4, 5, 3, 2, 3, 4, 4, 3, 4, 5, 3, 2, 4, 5, 5, 4, 5, 2, 4, 1,
1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 4, 3, 4, 4, 5, 3, 2, 4, 3, 4, 3, 5, 2,
2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4, 3, 4, 4, 3, 4, 5, 5, 4, 4, 3, 5, 2, 5, 4, 2, 1,
2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 2, 3, 3, 2, 3, 4, 4, 5, 4, 5, 5, 2, 4, 3, 5, 4, 3, 2, 4, 1,
3, 4, 4, 5, 4, 5, 3, 4, 4, 5, 5, 2, 3, 4, 2, 1, 2, 3, 3, 2, 3, 4, 2, 1, 3, 2, 4, 1, 2, 1, 1, 0 };

const unsigned char vertex_to_edge[3840] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 11,
2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, 3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, 3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, 9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, 9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, 2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, 8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, 9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, 4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, 3, 10, 1, 3, 11, 10, 7, 8, 4, -1,
-1, -1, -1, -1, -1, 1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, 4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, 4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, 5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, 2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, 9, 5, 4, 2, 3, 11, -1,
-1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, 0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, 2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, 10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, 4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, 5, 4, 0, 5, 0, 11, 5,
11, 10, 11, 0, 3, -1, -1, -1, 5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, 9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, 0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, 1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, 10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, 8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, 2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, 7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, 2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, 11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, 9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, 5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, 11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, 11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, 0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, 1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, 9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, 2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, 0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, 5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, 6, 3, 11, 6, 5, 3, 5,
1, 3, -1, -1, -1, -1, -1, -1, 0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, 3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, 6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, 1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, 10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, 6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, 7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, 3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, 0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, 9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, 8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, 5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, 0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, 6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, 10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, 10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, 1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, 3, 0, 8,
1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, 0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, 10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, 0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, 3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, 6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, 9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, 8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, 3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, 6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, 0, 7, 3, 0, 10, 7, 0,
9, 10, 6, 7, 10, -1, -1, -1, 10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, 10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, 7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, 7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, 2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, 1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, 11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, 8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, 0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, 7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, 10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, 2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, 6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, 7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 0, 8, 7, 6, 0, 6, 2, 0,
-1, -1, -1, -1, -1, -1, 2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, 10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, 10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, 0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, 7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, 6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, 8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, 9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, 6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, 4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, 10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, 8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, 0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, 1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, 10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, 4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, 10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, 5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, 11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, 9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, 6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, 7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, 3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, 7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, 9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, 1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, 4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, 7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, 6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, 3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, 0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, 6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5,
6, -1, -1, -1, 0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, 11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, 6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, 9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, 1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, 1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, 10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, 0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1,
11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, 5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, 10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, 11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, 7,
5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, 2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, 8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, 9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, 9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, 1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, 9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, 9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, 5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, 0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, 10, 11, 4, 10, 4,
5, 11, 3, 4, 9, 4, 1, 3, 1, 4, 2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, 0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, 0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, 9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, 5, 10, 2, 5, 2, 4, 4, 2, 0, -1,
-1, -1, -1, -1, -1, 3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, 5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, 8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, 0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, 1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, 3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, 4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, 9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0,
8, 3, 11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, 11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, 2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, 9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, 3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, 1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4,
9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, 4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, 0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, 3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, 0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, 9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, 1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };

const unsigned char vertex_to_edge_texture[5120] = { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,8,3,-1,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,8,3,-1,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,2,10,-1,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
2,8,3,-1,2,10,8,-1,10,9,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,11,2,-1,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,9,0,-1,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,11,2,-1,1,9,11,-1,9,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,10,1,-1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,10,1,-1,0,8,10,-1,8,11,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,9,0,-1,3,11,9,-1,11,10,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,8,10,-1,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,3,0,-1,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,1,9,-1,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,1,9,-1,4,7,1,-1,7,3,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,2,10,-1,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,4,7,-1,3,0,4,-1,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,2,10,-1,9,0,2,-1,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,
2,10,9,-1,2,9,7,-1,2,7,3,-1,7,9,4,-1,-1,-1,-1,-1,
8,4,7,-1,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
11,4,7,-1,11,2,4,-1,2,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,0,1,-1,8,4,7,-1,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,7,11,-1,9,4,11,-1,9,11,2,-1,9,2,1,-1,-1,-1,-1,-1,
3,10,1,-1,3,11,10,-1,7,8,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,11,10,-1,1,4,11,-1,1,0,4,-1,7,11,4,-1,-1,-1,-1,-1,
4,7,8,-1,9,0,11,-1,9,11,10,-1,11,0,3,-1,-1,-1,-1,-1,
4,7,11,-1,4,11,9,-1,9,11,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,5,4,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,5,4,-1,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
8,5,4,-1,8,3,5,-1,3,1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,2,10,-1,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,0,8,-1,1,2,10,-1,4,9,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
5,2,10,-1,5,4,2,-1,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,
2,10,5,-1,3,2,5,-1,3,5,4,-1,3,4,8,-1,-1,-1,-1,-1,
9,5,4,-1,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,11,2,-1,0,8,11,-1,4,9,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,5,4,-1,0,1,5,-1,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,
2,1,5,-1,2,5,8,-1,2,8,11,-1,4,8,5,-1,-1,-1,-1,-1,
10,3,11,-1,10,1,3,-1,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,9,5,-1,0,8,1,-1,8,10,1,-1,8,11,10,-1,-1,-1,-1,-1,
5,4,0,-1,5,0,11,-1,5,11,10,-1,11,0,3,-1,-1,-1,-1,-1,
5,4,8,-1,5,8,10,-1,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,7,8,-1,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,3,0,-1,9,5,3,-1,5,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,7,8,-1,0,1,7,-1,1,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,5,3,-1,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,7,8,-1,9,5,7,-1,10,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,
10,1,2,-1,9,5,0,-1,5,3,0,-1,5,7,3,-1,-1,-1,-1,-1,
8,0,2,-1,8,2,5,-1,8,5,7,-1,10,5,2,-1,-1,-1,-1,-1,
2,10,5,-1,2,5,3,-1,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,
7,9,5,-1,7,8,9,-1,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,5,7,-1,9,7,2,-1,9,2,0,-1,2,7,11,-1,-1,-1,-1,-1,
2,3,11,-1,0,1,8,-1,1,7,8,-1,1,5,7,-1,-1,-1,-1,-1,
11,2,1,-1,11,1,7,-1,7,1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,5,8,-1,8,5,7,-1,10,1,3,-1,10,3,11,-1,-1,-1,-1,-1,
5,7,0,-1,5,0,9,-1,7,11,0,-1,1,0,10,-1,11,10,0,-1,
11,10,0,-1,11,0,3,-1,10,5,0,-1,8,0,7,-1,5,7,0,-1,
11,10,5,-1,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,8,3,-1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,0,1,-1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,8,3,-1,1,9,8,-1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,6,5,-1,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,6,5,-1,1,2,6,-1,3,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,6,5,-1,9,0,6,-1,0,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,
5,9,8,-1,5,8,2,-1,5,2,6,-1,3,2,8,-1,-1,-1,-1,-1,
2,3,11,-1,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
11,0,8,-1,11,2,0,-1,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,1,9,-1,2,3,11,-1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,
5,10,6,-1,1,9,2,-1,9,11,2,-1,9,8,11,-1,-1,-1,-1,-1,
6,3,11,-1,6,5,3,-1,5,1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,8,11,-1,0,11,5,-1,0,5,1,-1,5,11,6,-1,-1,-1,-1,-1,
3,11,6,-1,0,3,6,-1,0,6,5,-1,0,5,9,-1,-1,-1,-1,-1,
6,5,9,-1,6,9,11,-1,11,9,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,
5,10,6,-1,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,3,0,-1,4,7,3,-1,6,5,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,9,0,-1,5,10,6,-1,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,
10,6,5,-1,1,9,7,-1,1,7,3,-1,7,9,4,-1,-1,-1,-1,-1,
6,1,2,-1,6,5,1,-1,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,2,5,-1,5,2,6,-1,3,0,4,-1,3,4,7,-1,-1,-1,-1,-1,
8,4,7,-1,9,0,5,-1,0,6,5,-1,0,2,6,-1,-1,-1,-1,-1,
7,3,9,-1,7,9,4,-1,3,2,9,-1,5,9,6,-1,2,6,9,-1,
3,11,2,-1,7,8,4,-1,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
5,10,6,-1,4,7,2,-1,4,2,0,-1,2,7,11,-1,-1,-1,-1,-1,
0,1,9,-1,4,7,8,-1,2,3,11,-1,5,10,6,-1,-1,-1,-1,-1,
9,2,1,-1,9,11,2,-1,9,4,11,-1,7,11,4,-1,5,10,6,-1,
8,4,7,-1,3,11,5,-1,3,5,1,-1,5,11,6,-1,-1,-1,-1,-1,
5,1,11,-1,5,11,6,-1,1,0,11,-1,7,11,4,-1,0,4,11,-1,
0,5,9,-1,0,6,5,-1,0,3,6,-1,11,6,3,-1,8,4,7,-1,
6,5,9,-1,6,9,11,-1,4,7,9,-1,7,11,9,-1,-1,-1,-1,-1,
10,4,9,-1,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,10,6,-1,4,9,10,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,
10,0,1,-1,10,6,0,-1,6,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,
8,3,1,-1,8,1,6,-1,8,6,4,-1,6,1,10,-1,-1,-1,-1,-1,
1,4,9,-1,1,2,4,-1,2,6,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,0,8,-1,1,2,9,-1,2,4,9,-1,2,6,4,-1,-1,-1,-1,-1,
0,2,4,-1,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
8,3,2,-1,8,2,4,-1,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,
10,4,9,-1,10,6,4,-1,11,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,8,2,-1,2,8,11,-1,4,9,10,-1,4,10,6,-1,-1,-1,-1,-1,
3,11,2,-1,0,1,6,-1,0,6,4,-1,6,1,10,-1,-1,-1,-1,-1,
6,4,1,-1,6,1,10,-1,4,8,1,-1,2,1,11,-1,8,11,1,-1,
9,6,4,-1,9,3,6,-1,9,1,3,-1,11,6,3,-1,-1,-1,-1,-1,
8,11,1,-1,8,1,0,-1,11,6,1,-1,9,1,4,-1,6,4,1,-1,
3,11,6,-1,3,6,0,-1,0,6,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,
6,4,8,-1,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
7,10,6,-1,7,8,10,-1,8,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,7,3,-1,0,10,7,-1,0,9,10,-1,6,7,10,-1,-1,-1,-1,-1,
10,6,7,-1,1,10,7,-1,1,7,8,-1,1,8,0,-1,-1,-1,-1,-1,
10,6,7,-1,10,7,1,-1,1,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,2,6,-1,1,6,8,-1,1,8,9,-1,8,6,7,-1,-1,-1,-1,-1,
2,6,9,-1,2,9,1,-1,6,7,9,-1,0,9,3,-1,7,3,9,-1,
7,8,0,-1,7,0,6,-1,6,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,
7,3,2,-1,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
2,3,11,-1,10,6,8,-1,10,8,9,-1,8,6,7,-1,-1,-1,-1,-1,
2,0,7,-1,2,7,11,-1,0,9,7,-1,6,7,10,-1,9,10,7,-1,
1,8,0,-1,1,7,8,-1,1,10,7,-1,6,7,10,-1,2,3,11,-1,
11,2,1,-1,11,1,7,-1,10,6,1,-1,6,7,1,-1,-1,-1,-1,-1,
8,9,6,-1,8,6,7,-1,9,1,6,-1,11,6,3,-1,1,3,6,-1,
0,9,1,-1,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
7,8,0,-1,7,0,6,-1,3,11,0,-1,11,6,0,-1,-1,-1,-1,-1,
7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,0,8,-1,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,1,9,-1,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
8,1,9,-1,8,3,1,-1,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,
10,1,2,-1,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,2,10,-1,3,0,8,-1,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,
2,9,0,-1,2,10,9,-1,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,
6,11,7,-1,2,10,3,-1,10,8,3,-1,10,9,8,-1,-1,-1,-1,-1,
7,2,3,-1,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
7,0,8,-1,7,6,0,-1,6,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,
2,7,6,-1,2,3,7,-1,0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,6,2,-1,1,8,6,-1,1,9,8,-1,8,7,6,-1,-1,-1,-1,-1,
10,7,6,-1,10,1,7,-1,1,3,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,
10,7,6,-1,1,7,10,-1,1,8,7,-1,1,0,8,-1,-1,-1,-1,-1,
0,3,7,-1,0,7,10,-1,0,10,9,-1,6,10,7,-1,-1,-1,-1,-1,
7,6,10,-1,7,10,8,-1,8,10,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,
6,8,4,-1,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,6,11,-1,3,0,6,-1,0,4,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,
8,6,11,-1,8,4,6,-1,9,0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,4,6,-1,9,6,3,-1,9,3,1,-1,11,3,6,-1,-1,-1,-1,-1,
6,8,4,-1,6,11,8,-1,2,10,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,2,10,-1,3,0,11,-1,0,6,11,-1,0,4,6,-1,-1,-1,-1,-1,
4,11,8,-1,4,6,11,-1,0,2,9,-1,2,10,9,-1,-1,-1,-1,-1,
10,9,3,-1,10,3,2,-1,9,4,3,-1,11,3,6,-1,4,6,3,-1,
8,2,3,-1,8,4,2,-1,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,4,2,-1,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,9,0,-1,2,3,4,-1,2,4,6,-1,4,3,8,-1,-1,-1,-1,-1,
1,9,4,-1,1,4,2,-1,2,4,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,
8,1,3,-1,8,6,1,-1,8,4,6,-1,6,10,1,-1,-1,-1,-1,-1,
10,1,0,-1,10,0,6,-1,6,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,6,3,-1,4,3,8,-1,6,10,3,-1,0,3,9,-1,10,9,3,-1,
10,9,4,-1,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,9,5,-1,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,8,3,-1,4,9,5,-1,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,
5,0,1,-1,5,4,0,-1,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,
11,7,6,-1,8,3,4,-1,3,5,4,-1,3,1,5,-1,-1,-1,-1,-1,
9,5,4,-1,10,1,2,-1,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,
6,11,7,-1,1,2,10,-1,0,8,3,-1,4,9,5,-1,-1,-1,-1,-1,
7,6,11,-1,5,4,10,-1,4,2,10,-1,4,0,2,-1,-1,-1,-1,-1,
3,4,8,-1,3,5,4,-1,3,2,5,-1,10,5,2,-1,11,7,6,-1,
7,2,3,-1,7,6,2,-1,5,4,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,5,4,-1,0,8,6,-1,0,6,2,-1,6,8,7,-1,-1,-1,-1,-1,
3,6,2,-1,3,7,6,-1,1,5,0,-1,5,4,0,-1,-1,-1,-1,-1,
6,2,8,-1,6,8,7,-1,2,1,8,-1,4,8,5,-1,1,5,8,-1,
9,5,4,-1,10,1,6,-1,1,7,6,-1,1,3,7,-1,-1,-1,-1,-1,
1,6,10,-1,1,7,6,-1,1,0,7,-1,8,7,0,-1,9,5,4,-1,
4,0,10,-1,4,10,5,-1,0,3,10,-1,6,10,7,-1,3,7,10,-1,
7,6,10,-1,7,10,8,-1,5,4,10,-1,4,8,10,-1,-1,-1,-1,-1,
6,9,5,-1,6,11,9,-1,11,8,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,6,11,-1,0,6,3,-1,0,5,6,-1,0,9,5,-1,-1,-1,-1,-1,
0,11,8,-1,0,5,11,-1,0,1,5,-1,5,6,11,-1,-1,-1,-1,-1,
6,11,3,-1,6,3,5,-1,5,3,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,2,10,-1,9,5,11,-1,9,11,8,-1,11,5,6,-1,-1,-1,-1,-1,
0,11,3,-1,0,6,11,-1,0,9,6,-1,5,6,9,-1,1,2,10,-1,
11,8,5,-1,11,5,6,-1,8,0,5,-1,10,5,2,-1,0,2,5,-1,
6,11,3,-1,6,3,5,-1,2,10,3,-1,10,5,3,-1,-1,-1,-1,-1,
5,8,9,-1,5,2,8,-1,5,6,2,-1,3,8,2,-1,-1,-1,-1,-1,
9,5,6,-1,9,6,0,-1,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,5,8,-1,1,8,0,-1,5,6,8,-1,3,8,2,-1,6,2,8,-1,
1,5,6,-1,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,3,6,-1,1,6,10,-1,3,8,6,-1,5,6,9,-1,8,9,6,-1,
10,1,0,-1,10,0,6,-1,9,5,0,-1,5,6,0,-1,-1,-1,-1,-1,
0,3,8,-1,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
11,5,10,-1,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
11,5,10,-1,11,7,5,-1,8,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,
5,11,7,-1,5,10,11,-1,1,9,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,
10,7,5,-1,10,11,7,-1,9,8,1,-1,8,3,1,-1,-1,-1,-1,-1,
11,1,2,-1,11,7,1,-1,7,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,8,3,-1,1,2,7,-1,1,7,5,-1,7,2,11,-1,-1,-1,-1,-1,
9,7,5,-1,9,2,7,-1,9,0,2,-1,2,11,7,-1,-1,-1,-1,-1,
7,5,2,-1,7,2,11,-1,5,9,2,-1,3,2,8,-1,9,8,2,-1,
2,5,10,-1,2,3,5,-1,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
8,2,0,-1,8,5,2,-1,8,7,5,-1,10,2,5,-1,-1,-1,-1,-1,
9,0,1,-1,5,10,3,-1,5,3,7,-1,3,10,2,-1,-1,-1,-1,-1,
9,8,2,-1,9,2,1,-1,8,7,2,-1,10,2,5,-1,7,5,2,-1,
1,3,5,-1,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,8,7,-1,0,7,1,-1,1,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,0,3,-1,9,3,5,-1,5,3,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,8,7,-1,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
5,8,4,-1,5,10,8,-1,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,
5,0,4,-1,5,11,0,-1,5,10,11,-1,11,3,0,-1,-1,-1,-1,-1,
0,1,9,-1,8,4,10,-1,8,10,11,-1,10,4,5,-1,-1,-1,-1,-1,
10,11,4,-1,10,4,5,-1,11,3,4,-1,9,4,1,-1,3,1,4,-1,
2,5,1,-1,2,8,5,-1,2,11,8,-1,4,5,8,-1,-1,-1,-1,-1,
0,4,11,-1,0,11,3,-1,4,5,11,-1,2,11,1,-1,5,1,11,-1,
0,2,5,-1,0,5,9,-1,2,11,5,-1,4,5,8,-1,11,8,5,-1,
9,4,5,-1,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
2,5,10,-1,3,5,2,-1,3,4,5,-1,3,8,4,-1,-1,-1,-1,-1,
5,10,2,-1,5,2,4,-1,4,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,10,2,-1,3,5,10,-1,3,8,5,-1,4,5,8,-1,0,1,9,-1,
5,10,2,-1,5,2,4,-1,1,9,2,-1,9,4,2,-1,-1,-1,-1,-1,
8,4,5,-1,8,5,3,-1,3,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,4,5,-1,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
8,4,5,-1,8,5,3,-1,9,0,5,-1,0,3,5,-1,-1,-1,-1,-1,
9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,11,7,-1,4,9,11,-1,9,10,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,8,3,-1,4,9,7,-1,9,11,7,-1,9,10,11,-1,-1,-1,-1,-1,
1,10,11,-1,1,11,4,-1,1,4,0,-1,7,4,11,-1,-1,-1,-1,-1,
3,1,4,-1,3,4,8,-1,1,10,4,-1,7,4,11,-1,10,11,4,-1,
4,11,7,-1,9,11,4,-1,9,2,11,-1,9,1,2,-1,-1,-1,-1,-1,
9,7,4,-1,9,11,7,-1,9,1,11,-1,2,11,1,-1,0,8,3,-1,
11,7,4,-1,11,4,2,-1,2,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,
11,7,4,-1,11,4,2,-1,8,3,4,-1,3,2,4,-1,-1,-1,-1,-1,
2,9,10,-1,2,7,9,-1,2,3,7,-1,7,4,9,-1,-1,-1,-1,-1,
9,10,7,-1,9,7,4,-1,10,2,7,-1,8,7,0,-1,2,0,7,-1,
3,7,10,-1,3,10,2,-1,7,4,10,-1,1,10,0,-1,4,0,10,-1,
1,10,2,-1,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,9,1,-1,4,1,7,-1,7,1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,9,1,-1,4,1,7,-1,0,8,1,-1,8,7,1,-1,-1,-1,-1,-1,
4,0,3,-1,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,10,8,-1,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,0,9,-1,3,9,11,-1,11,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,1,10,-1,0,10,8,-1,8,10,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,1,10,-1,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,2,11,-1,1,11,9,-1,9,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,0,9,-1,3,9,11,-1,1,2,9,-1,2,11,9,-1,-1,-1,-1,-1,
0,2,11,-1,8,0,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
2,3,8,-1,2,8,10,-1,10,8,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,
9,10,2,-1,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
2,3,8,-1,2,8,10,-1,0,1,8,-1,1,10,8,-1,-1,-1,-1,-1,
1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
1,3,8,-1,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, };



const unsigned char edeges_to_vertices[24] = { 0, 1, 1, 2, 2, 3,  3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 };
const glm::vec3 index_to_pos[8] = { glm::vec3(-1,-1,1), glm::vec3 (-1,1,1), glm::vec3(1,1,1), glm::vec3(1,-1,1),   glm::vec3(-1,-1,-1), glm::vec3(-1,1,-1), glm::vec3(1,1,-1), glm::vec3(1,-1,-1), };

RenderTerrain::RenderTerrain()
{

}

void RenderTerrain::buildPolygons(glm::vec3 p,std::vector<glm::vec3>& positions, std::vector<glm::vec3>&   normals, float scale, float vertices[]) {
	int index = 0;
	index += (vertices[7] > 0) ? 1 : 0;
	index *= 2;
	index += (vertices[6] > 0) ? 1 : 0;
	index *= 2;
	index += (vertices[5] > 0) ? 1 : 0;
	index *= 2;
	index += (vertices[4]> 0) ? 1 : 0;
	index *= 2;

	index += (vertices[3] > 0) ? 1 : 0;
	index *= 2;
	index += (vertices[2] > 0) ? 1 : 0;
	index *= 2;
	index += (vertices[1] > 0) ? 1 : 0;
	index *= 2;
	index += (vertices[0] > 0) ? 1 : 0;


	int triangleNumber = num_vec[index];
	for (int i = 0; i < triangleNumber; i++) {
		for (int j = 0; j < 3; j++) {
			int p1 = vertex_to_edge[index * 15 + i * 3 + j];
			//std::cout << p1 << std::endl;
			//std::cout << int(edeges_to_vertices[p1 * 2]) << " " << int(edeges_to_vertices[p1 * 2 + 1]) << std::endl;
			int v1 = edeges_to_vertices[p1 * 2];
			int v2 = edeges_to_vertices[p1 * 2 + 1];
			float value1 = abs(vertices[v1]);
			float value2 = abs(vertices[v2]);
			glm::vec3 pos = (((index_to_pos[v1] * value2 + index_to_pos[v2] * value1) / (value1 + value2))*scale/2.0)+p;
			positions.push_back(pos);
			//gradient
			normals.push_back(glm::normalize(glm::vec3(get_density(pos + glm::vec3(0.1, 0, 0))-get_density(pos - glm::vec3(0.1, 0, 0)), get_density(pos + glm::vec3(0, 0.1, 0)) - get_density(pos - glm::vec3(0, 0.1, 0)), get_density(pos + glm::vec3(0, 0, 0.1) - get_density(pos - glm::vec3(0, 0, 0.1))))));
		}
		//glm::vec3 n = -glm::normalize(glm::cross(positions[positions.size() - 1] - positions[positions.size() - 3], positions[positions.size() - 2] - positions[positions.size() - 3]));
		//normals.push_back(n);
		//normals.push_back(n);
		//normals.push_back(n);
	}

}



float RenderTerrain::get_density(glm::vec3 pos) {
	float elevation_coeffitient = 4 * (1 - fmin(1.0, (pos.y + 70) / 100));
	glm::vec3 strong_warp = pos + elevation_coeffitient *glm::vec3(simplex_noise3d(ctx1, pos / 9.1), simplex_noise3d(ctx2, pos / 9.6), simplex_noise3d(ctx3, pos / 9.31));
	glm::vec3 warp = pos + 0.1*glm::vec3(simplex_noise3d(ctx1, pos / 4.1), simplex_noise3d(ctx2, pos / 3.6), simplex_noise3d(ctx3, pos / 3.91));
	//return pos.y+10 + simplex_noise3d(ctx1, pos/20)*2.4 + simplex_noise3d(ctx1, pos / 7) * 0.66 + simplex_noise3d(ctx1, pos / 11) * 0.74 + simplex_noise3d(ctx1, pos * 1.71) * 0.24 + simplex_noise3d(ctx1, pos * 3) * 0.14 + glm::sin(warp.z / 10) * 3 + glm::sin(warp.x / 10) * 3;
	float hardLimit = 0;
	if (pos.y < 0 && ((pos.x<start || pos.x>end - scale) || (pos.z<start || pos.z>end - scale))) hardLimit = -1000;
	//return pos.y - pos.x*pos.x / 100 - pos.z*pos.z / 100;
	//return pos.y;
	return pos.y + (50*exp(-(pos.x*pos.x+pos.z*pos.z)/1200) -20) + open_simplex_noise2(ctx4, strong_warp.z / 25.7, strong_warp.x / 25.6) * 21.3 + open_simplex_noise3(ctx4, strong_warp.z / 3.7, strong_warp.x / 3.56,1) * 7.3 + fmax(0,(-pos.y*fabs(pos.y)+9)*0.008)*simplex_noise3d(ctx3,pos/8.3)+0.03*simplex_noise3d(ctx1,pos*2)+hardLimit;
	//return pos.y + 4 + glm::sin(strong_warp.z / 8) * 7 + glm::sin(strong_warp.x / 8) * 7;
	//return glm::length(pos) -10.5;
}


void RenderTerrain::init_vertex_to_edge() {

	//Generate depth texture
	glGenTextures(1, &lookupTexture);
	glBindTexture(GL_TEXTURE_2D, lookupTexture);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 5, 256, 0, GL_RGBA, GL_UNSIGNED_BYTE, vertex_to_edge_texture);

	//Filtering
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

	//Attach depth texture to frame buffer
	glGenerateMipmap(GL_TEXTURE_2D);
}

void RenderTerrain::sampleTerrain(glm::vec3 pos, float* values,float scale) {
	for (int index = 0; index < 8; index++) {
		glm::vec3 translated = pos + index_to_pos[index] * (scale / 2.0);
		float value = get_density(translated);
		values[index] = value;
	}
}

void RenderTerrain::setValue(glm::vec3 pos, float scale, std::vector<glm::vec4>& val1, std::vector<glm::vec4>& val2, std::vector<glm::vec3>& points) {
	float values[8] = {};
	sampleTerrain(pos, values, scale);
	bool sign = signbit(values[0]);
	bool same = true;
	for (auto x : values) {
		same = (same && signbit(x) == sign);
	}
	if (!same) {
		val1.push_back(glm::vec4(values[0], values[1], values[2], values[3]));
		val2.push_back(glm::vec4(values[4], values[5], values[6], values[7]));
		points.push_back(pos);
	}
}

void RenderTerrain::initCPU() {
	float values[8] = {};
	std::vector<glm::vec3> positions;
	std::vector<glm::vec3> normals;
	float scale = 2;
	 start = -50. + scale / 2;
	 end = 50;
	open_simplex_noise(90374, &ctx1);
	open_simplex_noise(46274, &ctx2);
	open_simplex_noise(77085, &ctx3);
	open_simplex_noise(69436, &ctx4);

	for (float i = start; i < end; i += scale) {
		for (float j = start; j < end; j += scale) {
			for (float k = start; k < end; k += scale) {
				glm::vec3 pos = glm::vec3(i, j, k);
				sampleTerrain(pos, values, scale);
				buildPolygons(pos, positions, normals, scale, values);
			}
		}
	}
	size = positions.size() * 3;
	vertexSize = positions.size() * 3;

	Core::Shader_Loader shaderLoader;
	//program = shaderLoader.CreateProgram("shaders/terrain.vert", "shaders/terrain.geom", "shaders/terrain.frag");
	program = shaderLoader.CreateProgram("shaders/terrain.vert", "shaders/terrain.frag");
	glGenVertexArrays(1, &VertexArray);
	glBindVertexArray(VertexArray);


	glGenBuffers(1, &VertexBuffer);
	glBindBuffer(GL_ARRAY_BUFFER, VertexBuffer);
	glBufferData(GL_ARRAY_BUFFER, 2 * positions.size() * 3 * sizeof(float), NULL, GL_STATIC_DRAW);
	glBufferSubData(GL_ARRAY_BUFFER, 0, positions.size() * 3 * sizeof(float), (float *)&positions[0]);


	glBufferSubData(GL_ARRAY_BUFFER, positions.size() * 3 * sizeof(float), positions.size() * 3 * sizeof(float), (float *)&normals[0]);


	//glBufferData(GL_ARRAY_BUFFER, 8*sizeof(float), vertices, GL_STATIC_DRAW);
	glPos = glGetAttribLocation(program, "vertexPosition");
	glEnableVertexAttribArray(glPos);
	glVertexAttribPointer(glPos, 3, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));

	//glBufferData(GL_ARRAY_BUFFER, 8*sizeof(float), vertices, GL_STATIC_DRAW);
	glNor = glGetAttribLocation(program, "vertexNormal");
	glEnableVertexAttribArray(glNor);
	glVertexAttribPointer(glNor, 3, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(vertexSize * sizeof(float)));
	glBindVertexArray(0);

}

void RenderTerrain::init() {
	initCPU();
}

void RenderTerrain::initGPU() {
	init_vertex_to_edge();

	float values[8] = {};
	std::vector<glm::vec3> positions;
	std::vector<glm::vec3> normals;
	std::vector<glm::vec4> val1;
	std::vector<glm::vec4> val2;
	scale = 0.5;
	float start = -50.5 + scale / 2;
	float end = 50.5;
	open_simplex_noise(90374, &ctx1);
	open_simplex_noise(46274, &ctx2);
	open_simplex_noise(77085, &ctx3);
	open_simplex_noise(69436, &ctx4);
	
	for (float i = start; i < end; i += scale) {
		for (float j = start; j < end; j += scale) {
			for (float k = start; k < end; k += scale) {
				glm::vec3 pos = glm::vec3(i, j, k);
				//setValue(pos, scale, val1, val2, positions);
				positions.push_back(pos);
			}
		}
	}//setValue(glm::vec3(0,0,0), scale, val1, val2, positions);
	val1.push_back(glm::vec4(0));
	val2.push_back(glm::vec4(0));
	size = positions.size() * 3;
	vertexSize = positions.size() * 3;

	Core::Shader_Loader shaderLoader;
	program = shaderLoader.CreateProgram("shaders/terrainG.vert", "shaders/terrainG.geom", "shaders/terrainG.frag");
	glGenVertexArrays(1, &VertexArray);
	glBindVertexArray(VertexArray);


	glGenBuffers(1, &VertexBuffer);
	glBindBuffer(GL_ARRAY_BUFFER, VertexBuffer);
	glBufferData(GL_ARRAY_BUFFER, positions.size() * 3 * sizeof(float) + 2 * val1.size()*4*sizeof(float), NULL, GL_STATIC_DRAW);
	glBufferSubData(GL_ARRAY_BUFFER, 0, positions.size() * 3 * sizeof(float), (float *)&positions[0]);


	glBufferSubData(GL_ARRAY_BUFFER, positions.size() * 3 * sizeof(float), val1.size() * 4 * sizeof(float), (float *)&val1[0]);
	glBufferSubData(GL_ARRAY_BUFFER, positions.size() * 3 * sizeof(float) + val1.size() * 4 * sizeof(float), val2.size() * 4 * sizeof(float), (float *)&val2[0]);


	//glBufferData(GL_ARRAY_BUFFER, 8*sizeof(float), vertices, GL_STATIC_DRAW);
	glPos = glGetAttribLocation(program, "vertexPosition");
	glEnableVertexAttribArray(glPos);
	glVertexAttribPointer(glPos, 3, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));

	//glBufferData(GL_ARRAY_BUFFER, 8*sizeof(float), vertices, GL_STATIC_DRAW);
	glVal1 = glGetAttribLocation(program, "vertexValue1");
	glEnableVertexAttribArray(glVal1);
	glVertexAttribPointer(glVal1, 3, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(vertexSize * sizeof(float)));
	glBindVertexArray(0);

	glVal2 = glGetAttribLocation(program, "vertexValue2");
	glEnableVertexAttribArray(glVal2);
	glVertexAttribPointer(glVal2, 3, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(vertexSize * sizeof(float) + val1.size() * 4 * sizeof(float)));
	glBindVertexArray(0);
}
void RenderTerrain::setProgram(GLuint& program) {
}


void RenderTerrain::render(glm::mat4 perspectiveCameraMatrix, glm::vec4 clipPlane, glm::vec3 cameraPos) {
	glUseProgram(program);
	glBindVertexArray(VertexArray);
	glUniform4fv(glGetUniformLocation(program, "clip_plane"), 1, (float*)&clipPlane);
	glm::mat4 MVP = perspectiveCameraMatrix * glm::translate(glm::vec3(cameraPos.x, 0, cameraPos.z));
	glUniformMatrix4fv(glGetUniformLocation(program, "modelViewProjectionMatrix"), 1, GL_FALSE, (float*)&MVP);
	glDrawArrays(GL_TRIANGLES, 0, vertexSize/3);
	glBindVertexArray(0);
	glUseProgram(0);

}
void RenderTerrain::render(RenderBundle bundle) {
	glUseProgram(program);
	glBindVertexArray(VertexArray);
	Core::SetActiveTexture(depthTexture, "shadowSampler", program, 0);
	glUniform4fv(glGetUniformLocation(program, "clip_plane"), 1, (float*)&bundle.clipPlane);
	glUniform3fv(glGetUniformLocation(program, "cameraPos"), 1, (float*)&bundle.cameraPos);
	glUniformMatrix4fv(glGetUniformLocation(program, "lightMVP"), 1, GL_FALSE, (float*)&bundle.lightMVP);
	glm::mat4 MVP = bundle.perspectiveCameraMatrix;
	glUniformMatrix4fv(glGetUniformLocation(program, "modelViewProjectionMatrix"), 1, GL_FALSE, (float*)&MVP);
	glDrawArrays(GL_TRIANGLES, 0, vertexSize/3);
	glBindVertexArray(0);
	glUseProgram(0);

}
void RenderTerrain::renderGeometry(RenderBundle bundle) {
	glUseProgram(program);
	glBindVertexArray(VertexArray);
	Core::SetActiveTexture(depthTexture, "shadowSampler", program, 0);
	Core::SetActiveTexture(lookupTexture, "vertex_to_edge", program, 1);

	glUniform4fv(glGetUniformLocation(program, "clip_plane"), 1, (float*)&bundle.clipPlane);
	glUniform3fv(glGetUniformLocation(program, "cameraPos"), 1, (float*)&bundle.cameraPos);
	glUniformMatrix4fv(glGetUniformLocation(program, "lightMVP"), 1, GL_FALSE, (float*)&bundle.lightMVP);
	glUniform1f(glGetUniformLocation(program, "scale"), scale);
	glm::mat4 MVP = bundle.perspectiveCameraMatrix;
	glUniformMatrix4fv(glGetUniformLocation(program, "modelViewProjectionMatrix"), 1, GL_FALSE, (float*)&MVP);
	glDrawArrays(GL_POINTS, 0, (vertexSize/3));
	glBindVertexArray(0);
	glUseProgram(0);

}

void RenderTerrain::setShadowProgram(GLuint& sProgram, GLuint& depthTexture) {
	this->depthTexture = depthTexture;
	glBindVertexArray(VertexArray);
	this->shadowProgram = sProgram;
	glPos = glGetAttribLocation(shadowProgram, "vertexPosition");
	glEnableVertexAttribArray(glPos);
	glVertexAttribPointer(glPos, 3, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));
	glBindVertexArray(0);

}


void RenderTerrain::renderShadow(glm::mat4 lightMVP) {
	glUseProgram(shadowProgram);
	glBindVertexArray(VertexArray);
	glUniformMatrix4fv(glGetUniformLocation(shadowProgram, "lightMVPMatrix"), 1, GL_FALSE, (float*)&lightMVP);
	glDrawArrays(GL_TRIANGLES, 0, vertexSize/3);
	glBindVertexArray(0);
	glUseProgram(0);

}

void RenderTerrain::render(glm::mat4 perspectiveCameraMatrix,glm::vec3 cameraPos) {
	render(perspectiveCameraMatrix, glm::vec4(0.0), cameraPos);

}

RenderTerrain::~RenderTerrain()
{
}
